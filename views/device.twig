{% extends 'layout.twig' %}

{% block body %}
	<h2>Device "{{ device.name }}"</h2>
	<h3>Sensors</h3>
	<div class="devicesGroupContainer highlighted" id="sensorsGroupContainer">
		{% for id in device.sensors|keys %}
			<div class="container" style="width: 19.2%; height: 250px">
				<header>
					<span class="centerText title">{{ device.sensors[id].name }}</span>
				</header>
				<div class="mainView">
					<span>Location: {{ device.sensors[id].loc.value }}{% if device.sensors[id].loc.type is defined %} ({{ device.sensors[id].loc.type }}){% endif %}</span>
					{#{% for prop in device.sensors[id].data|keys %}
						{% if prop|length > 0 and sensorLayout[prop].title is defined %}
							<span>{{ sensorLayout[prop].title }}: {{ device.sensors[id].data[prop] }}</span>
						{% endif %}
					{% endfor %}#}
				</div>
				<footer class="footer">
					<button class="dangerButton waves-light waves-button waves-float" onclick="removeSensor('{{ id }}')">Remove</button>
					<button class="waves-light waves-button waves-float" onclick="reconfigureSensor('{{ id }}')">Configure</button>
				</footer>
			</div>
		{% endfor %}
		<div class="container placeholder" style="width: 19.2%; height: 250px;">
			<div class="plusCircleButton" id="addSensor">
				<span class="plusCircleText">+</span>
			</div>
		</div>
	</div>
	<h3>Actuators</h3>
	<div class="devicesGroupContainer highlighted" id="actuatorsGroupContainer">
		{% for id in device.actuators|keys %}
			<div class="container" style="width: 19.2%; height: 250px">
				<header>
					<span class="centerText title">{{ device.actuators[id].name }}</span>
				</header>
				<div class="mainView">
					<span>Location: {{ device.actuators[id].loc.value }}{% if device.actuators[id].loc.type is defined %} ({{ device.actuators[id].loc.type }}){% endif %}</span>
					{#{% for prop in device.sensors[id].data|keys %}
						{% if prop|length > 0 and sensorLayout[prop].title is defined %}
							<span>{{ sensorLayout[prop].title }}: {{ device.sensors[id].data[prop] }}</span>
						{% endif %}
					{% endfor %}#}
				</div>
				<footer class="footer">
					<button class="dangerButton waves-light waves-button waves-float" onclick="removeSensor('{{ id }}')">Remove</button>
					<button class="waves-light waves-button waves-float" onclick="reconfigureActuator('{{ id }}')">Configure</button>
				</footer>
			</div>
		{% endfor %}
		<div class="container placeholder" style="width: 19.2%; height: 250px;">
			<div class="plusCircleButton" id="addActuator">
				<span class="plusCircleText">+</span>
			</div>
		</div>
	</div>
{% endblock %}

{% block scripts %}
	<script type="text/javascript">
		let device = {{ device|json_encode|raw }};
		let baseForm = {
			"name": {
				"type": "textbox",
				"isTitled": true
			}
		};
		let locs = {{ availableLocations|json_encode|raw }};
		let locLabels = {{ locationLabels|json_encode|raw }};
		if(!Array.isArray(locs) && !locs.hasOwnProperty("_io")){
			baseForm.locType = {
				type: "list",
				isTitled: true,
				title: locLabels.locationTypeTitle,
				items: Object.keys(locs)
			};
		}
		let locLayout = {
			loc: {
				type: "list",
				isTitled: true,
				title: locLabels.locationTitle
			}
		};
		
		function _registerAddDialog(type){
			document.getElementById("add" + type).addEventListener("click", () => {
				baseForm.name.title = type + " Name";
				let window = displayWindow("Add New " + type, 450, createForm(baseForm, "next", (data) => {
					closeWindow(window);
					if(data.hasOwnProperty("locType"))
						locLayout.loc.items = locs[data.locType];
					else
						locLayout.loc.items = locs;
					let capableLocs = [];
					let neededCap = type.startsWith("S") ? "i" : "o";
					for(let cap in locLayout.loc.items)
						if(locLayout.loc.items.hasOwnProperty(cap))
							if(cap.indexOf(neededCap) !== -1)
								capableLocs.push(...locLayout.loc.items[cap]);
					locLayout.loc.items = capableLocs;
					displayWindow("Configure " + type, 450, createForm(locLayout, "add " + type, (locData) => {
						socket.emit("add" + type, {deviceID: "{{ deviceID }}", name: data.name, location: {value: locData.loc, type: data.locType}, extraData: undefined}, (res) => {
							if(!res) alert("An error has occurred");
							else reload();
						});
					}));
				}));
			});
		}
		
		function _displayReconfigureDialog(type, object){
			let prefilled = Object.assign({}, baseForm);
			prefilled.name.value = object.name;
			prefilled.name.title = type + " Name";
			if(prefilled.hasOwnProperty("locType"))
				prefilled.locType.value = object.loc.type;
			let prefilledLocLayout = Object.assign({}, locLayout);
			let window = displayWindow("Configure " + type, 450, createForm(prefilled, "next", (data) => {
				closeWindow(window);
				if(data.hasOwnProperty("locType")) {
					prefilledLocLayout.loc.items = locs[data.locType];
					if(object.loc.type === data.locType)
						prefilledLocLayout.loc.value = object.loc.value;
				}else {
					prefilledLocLayout.loc.items = locs;
					prefilledLocLayout.loc.value = object.loc.value;
				}
				displayWindow("Configure " + type, 450, createForm(prefilledLocLayout, "done", (locData) => {
					socket.emit("configure" + type, {deviceID: "{{ deviceID }}", name: data.name, location: {value: locData.loc, type: data.locType}, extraData: undefined}, (res) => {
						if(!res) alert("An error has occurred");
						else reload();
					});
				}));
			}));
		}
		
		Waves.init();
		_registerAddDialog("Sensor");
		_registerAddDialog("Actuator");
		
		function reconfigureSensor(id){
			_displayReconfigureDialog("Sensor", device.sensors[id]);
		}
		
		function reconfigureActuator(id){
			_displayReconfigureDialog("Actuator", device.sensors[id]);
		}
		
		function removeSensor(id){
			socket.emit("removeSensor", {sensorID: id}, (res) => {
				if(!res) alert("An error has occurred");
				else reload();
			});
		}
	</script>
{% endblock %}