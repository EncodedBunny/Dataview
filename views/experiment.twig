{% extends 'layout.twig' %}

{% block screen %}
{% embed "templates/dataflowEditorContainer.twig" %}{% endembed %}
{% endblock %}

{% block body %}
	<h2>Experiment "{{ experiment.name }}"</h2>
	<span class="subHeader">Current Measurement:
	{% if experiment.measurement.type %}
		{{ experiment.measurement.type }}
	{% else %}
		None
	{% endif %}
	</span>
	<div style="display: inline-flex; align-items: center">
		<button class="waves-button waves-float waves-ripple" onclick="displayMeasurementSelector()" style="margin-top: 14px">Configure</button>
		<button class="waves-button waves-float waves-ripple" onclick="displayDataflowEditor()" style="margin-top: 14px; margin-left: 0">Edit Dataflow</button>
		{% if experiment.measurement.isActive %}
			<button class="waves-button waves-float waves-ripple dangerButton" onclick="" style="margin-top: 14px; margin-left: 0">Stop</button>
		{% else %}
			<button class="waves-button waves-float waves-ripple greenButton" style="margin-top: 14px; margin-left: 0" {% if not experiment.measurement.type %}title="You must configure a measurement before starting one" disabled{% else %} onclick="beginMeasurement()"{% endif %}>Begin</button> <!-- TODO: Check if measurement is configured -->
		{% endif %}
		{% if experiment.dataflow.nodes|length <= 0 %}
			<span class="warningIcon" title="The experiment's dataflow is empty"></span>
		{% endif %}
	</div>
	<h3>Sensors</h3>
	{% if experiment.sensors|length <= 0 %}
		<div class="emptyTableDiv">
			<span>This experiment does not have any sensors</span>
		</div>
	{% else %}
		<table>
			<thead>
			<tr>
				<th col-size="medium">Name</th>
				<th col-size="medium">Device</th>
				<th col-size="uuid">ID</th>
			</tr>
			</thead>
			<tbody id="tableBody">
			{% for sensorData in experiment.sensors %}
				<tr>
					<td col-size="medium">{{ sensorData.name }}</td>
					<td col-size="medium">{{ sensorData.device }}</td>
					<td col-size="uuid"><span class="highlightText">{{ sensorData.id }}</span></td>
				</tr>
			{% endfor %}
			</tbody>
		</table>
	{% endif %}
	<button class="waves-button waves-float waves-ripple blueButton" style="margin-left: 0" onclick="openAddSensorDialog()">Configure Sensors</button>
	<h3>Graphs</h3>
	<div class="devicesGroupContainer" id="graphsGroupContainer">
		<script type="text/javascript">
			let graphs = {};
		</script>
		{% for graph in experiment.graphs %}
			<div class="container" style="width: 600px; height: 350px">
				<header>
					<span class="centerText title">{{ graph.title }}</span>
				</header>
				<div class="mainView">
					<div class="graphHolder">
						<canvas id="graph-{{ graph.title }}"></canvas>
						<script type="text/javascript">
							graphs["{{ graph.title }}"] = new Chart(document.getElementById("graph-{{ graph.title }}").getContext("2d"), {
								type: 'line',
								labels: [],
								data: {
									datasets: [{
										fill: 'origin',
										data: [],
										borderColor: 'rgba(48, 63, 159, 1)',
										borderWidth: 2,
										pointBorderColor: 'rgba(48, 63, 159, 1)',
										outerGlowColor: 'rgba(60, 78, 194, 1)',
										outerGlowWidth: 5,
										pointRadius: 1
									}]
								},
								options: {
									responsive: true,
									scales: {
										yAxes: [
											{
												labelString: "{{ graph.axisLabels.y }}",
												ticks: {}
											}
										],
										xAxes: [{
											display: true,
											labelString: "{{ graph.axisLabels.x }}",
											ticks: {
												maxTicksLimit: 10
											}
										}]
									},
									plugins: {
										filler: {
											propagate: true
										}
									},
									legend: {
										display: false
									},
									tooltips: {
										enabled: false
									},
									animation: {
										duration: 400
									}
								}
							});
						</script>
					</div>
				</div>
				<footer class="footer"></footer>
			</div>
		{% endfor %}
		<div class="container placeholder" style="width: 600px; height: 350px;">
			<div class="plusCircleButton" id="addGraph">
				<span class="plusCircleText">+</span>
			</div>
		</div>
	</div>
{% endblock %}

{% block scripts %}
	<script type="text/javascript" src="/javascripts/dataflowEditor.js"></script>
	<script type="text/javascript">
		let experiment = {{ experiment|json_encode|raw }};
		loadDataflowMenuNodes({{ registeredNodes|json_encode|raw }});
		loadDataflowMenuNodes(experiment.dataflow.registeredNodes);
		let dtf = new Dataflow(experiment.dataflow);
		Waves.init();
		
		let measurementTypes = {{ measurementTypes|json_encode|raw }};
		
		socket.emit("listenToExperiment", {id: "{{ experimentID }}"});
		socket.on("graphData", (data) => {
			let graph = graphs[data.title];
			graph.data.labels.push(data.point.x);
			graph.data.datasets.forEach((dataset) => {
				dataset.data.push(data.point);
				if(dataset.data.length > 10) {
					graph.data.labels.shift();
					dataset.data.shift();
				}
			});
			graph.update();
		});
		
		document.getElementById("addGraph").onclick = () => {
			displayWindow("New Graph", 450, createForm({
				"title": {
					"type": "textbox",
					"isTitled": true,
					"title": "Title"
				},
				"xLbl": {
					"type": "textbox",
					"isTitled": true,
					"title": "X Axis Label"
				},
				"yLbl": {
					"type": "textbox",
					"isTitled": true,
					"title": "Y Axis Label"
				}
			}, "create", (data) => {
				socket.emit("addGraphToExperiment", {experimentID: "{{ experimentID }}", title: data.title, xLbl: data.xLbl, yLbl: data.yLbl}, (res) => {
					if(!res) alert("An error has occurred");
					else reload();
				});
			}));
		};
		
		function displayDataflowEditor(){
			displayEditor(dtf, () => {
				socket.emit("updateExperimentDataflow", {id: "{{ experimentID }}", dataflowStructure: currentEditor.fileStructure}, (res) => {
					if(!res) alert("An error occurred while trying to save");
					closeEditor();
					reload();
				});
			});
		}
		
		function hasSensor(sensorID){
			for(const sensor of experiment.sensors)
				if(sensor.id === sensorID) return true;
			return false;
		}
		
		function changeBtnType(btn, shouldAdd){
			btn.classList.toggle("dangerButton");
			btn.classList.toggle("blueButton");
			while(btn.lastChild) // TODO: Create function for this in graphicEnvironment
				btn.removeChild(btn.lastChild);
			btn.appendChild(document.createTextNode(shouldAdd ? "Add" : "Remove"));
		}
		
		function openAddSensorDialog(){
			let dialogRoot = document.createElement("ul");
			dialogRoot.classList.add("menu");
			for(const devData of {{ devices|json_encode|raw }}){
				if(Object.keys(devData.device.sensors).length <= 0) continue;
				let devLi = document.createElement("li");
				devLi.classList.add("menuItem");
				let devDiv = document.createElement("div");
				devDiv.classList.add("menuItemHeader");
				let arrowDiv = document.createElement("div");
				arrowDiv.classList.add("menuArrow");
				devDiv.appendChild(arrowDiv);
				let devSpan = document.createElement("span");
				devSpan.appendChild(document.createTextNode(devData.device.name));
				devDiv.appendChild(devSpan);
				devLi.appendChild(devDiv);
				let senUl = document.createElement("ul");
				senUl.classList.add("inner");
				devSpan.onclick = arrowDiv.onclick = () => {
					devLi.classList.toggle("active");
					devDiv.classList.toggle("activeMenuItem");
					arrowDiv.classList.toggle("active");
					senUl.classList.toggle("active");
				};
				for(const sensorID of Object.keys(devData.device.sensors)){
					let senLi = document.createElement("li");
					senLi.classList.add("menuItem");
					let senDiv = document.createElement("div");
					senDiv.classList.add("menuItemHeader", "noChildren");
					let senSpan = document.createElement("span");
					senSpan.appendChild(document.createTextNode(devData.device.sensors[sensorID].type));
					senDiv.appendChild(senSpan);
					let added = hasSensor(sensorID);
					let btn = document.createElement("button");
					btn.classList.add(added ? "dangerButton" : "blueButton", "waves-button", "waves-float", "waves-ripple");
					btn.appendChild(document.createTextNode(added ? "Remove" : "Add"));
					btn.setAttribute("style", "margin-left: auto");
					btn.onclick = () => {
						let prevState = hasSensor(sensorID);
						if(prevState){
							socket.emit("removeSensorFromExperiment", {experimentID: "{{ experimentID }}", sensorID: sensorID}, (status) => {
								if(status) {
									for(const index in experiment.sensors)
										if(experiment.sensors.hasOwnProperty(index) && experiment.sensors[index].id === sensorID){
											experiment.sensors.splice(index, 1);
											break;
										}
									changeBtnType(btn, true);
								}
							});
						} else {
							socket.emit("addSensorToExperiment", {experimentID: "{{ experimentID }}", deviceID: devData.id, sensorID: sensorID}, (sensor) => {
								if(sensor) {
									experiment.sensors.push(sensor);
									changeBtnType(btn, false);
								}
							});
						}
					};
					senDiv.appendChild(btn);
					senLi.appendChild(senDiv);
					senUl.appendChild(senLi);
				}
				devLi.appendChild(senUl);
				dialogRoot.appendChild(devLi);
			}
			if(dialogRoot.children.length <= 0){
				let noSensorSpan = document.createElement("span");
				noSensorSpan.appendChild(document.createTextNode("No Sensor In Project"));
				dialogRoot.appendChild(noSensorSpan);
			}
			displayWindow("Add Sensors To Experiment", 450, dialogRoot, {onClose: () => {
				reload();
			}, marginBottom: false, maxHeight: 70});
		}
		
		function displayMeasurementSelector(){
			let confTemplate = {
				"type": {
					"type": "list",
					"isTitled": true,
					"title": "Type",
					"items": Object.keys(measurementTypes) // TODO: Get supported measurement types (maybe the intersection of all supported types from all devices related to this experiment)
				},
				"frequency": {
					"type": "textbox",
					"isTitled": true,
					"title": "Measurement Frequency (ms)"
				}
			};
			{% if experiment.measurement.type %}
			confTemplate.type.value = "{{ experiment.measurement.type }}";
			confTemplate.frequency.value = "{{ experiment.measurement.frequency }}";
			{% endif %}
			let typeWindow = displayWindow("Configure Measurement", 450, createForm(confTemplate, "next", (generalData) => {
				closeWindow(typeWindow);
				let typeTemplate = measurementTypes[generalData.type].form;
				{% if experiment.measurement.type %}
				if(generalData.type === "{{ experiment.measurement.type }}"){
					let data = {{ experiment.measurement.data|json_encode|raw }};
					for(const field of Object.keys(data))
						if(typeTemplate.hasOwnProperty(field))
							typeTemplate[field].value = data[field];
				}
				{% endif %}
				let confWindow = displayWindow("Configure Measurement", 450, createForm(typeTemplate, "done", (typeData) => {
					socket.emit("setExperimentMeasurement", {id: "{{ experimentID }}", type: generalData.type, frequency: generalData.frequency, measurementData: typeData}, (res) => {
						// TODO: Display message if it fails
						closeWindow(confWindow);
						reload();
					});
				}));
			}));
		}
		
		function beginMeasurement(){
			socket.emit("beginExperiment", {id: "{{ experimentID }}"}, (res) => {
				if(!res) alert("An error has occurred");
				else reload();
			});
		}
		
		function stopMeasurement(){
			socket.emit("stopExperiment", {id: "{{ experimentID }}"}, (res) => {
				if(!res) alert("An error has occurred");
				else reload();
			});
		}
	</script>
{% endblock %}
